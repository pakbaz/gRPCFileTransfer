// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: upload.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace gRPCFileTransfer {

  /// <summary>Holder for reflection information generated from upload.proto</summary>
  public static partial class UploadReflection {

    #region Descriptor
    /// <summary>File descriptor for upload.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UploadReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx1cGxvYWQucHJvdG8SBnVwbG9hZCJSCgRJbmZvEhYKDnVwbG9hZGVkQ2h1",
            "bmtzGAEgASgFEhMKC3RvdGFsQ2h1bmtzGAIgASgFEh0KFXVwbG9hZGVkQ2h1",
            "bmtzSW5kZXhlcxgDIAEoCSJ8CglGaWxlQ2h1bmsSDgoGZmlsZUlkGAEgASgJ",
            "EhAKCEZpbGVOYW1lGAIgASgJEhIKCmNodW5rSW5kZXgYAyABKAUSEwoLdG90",
            "YWxDaHVua3MYBCABKAUSFQoNdG90YWxGaWxlU2l6ZRgFIAEoAxINCgVjaHVu",
            "axgGIAEoDDI1CghVcGxvYWRlchIpCgZVcGxvYWQSES51cGxvYWQuRmlsZUNo",
            "dW5rGgwudXBsb2FkLkluZm9CE6oCEGdSUENGaWxlVHJhbnNmZXJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::gRPCFileTransfer.Info), global::gRPCFileTransfer.Info.Parser, new[]{ "UploadedChunks", "TotalChunks", "UploadedChunksIndexes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::gRPCFileTransfer.FileChunk), global::gRPCFileTransfer.FileChunk.Parser, new[]{ "FileId", "FileName", "ChunkIndex", "TotalChunks", "TotalFileSize", "Chunk" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Info : pb::IMessage<Info>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::gRPCFileTransfer.UploadReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info(Info other) : this() {
      uploadedChunks_ = other.uploadedChunks_;
      totalChunks_ = other.totalChunks_;
      uploadedChunksIndexes_ = other.uploadedChunksIndexes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info Clone() {
      return new Info(this);
    }

    /// <summary>Field number for the "uploadedChunks" field.</summary>
    public const int UploadedChunksFieldNumber = 1;
    private int uploadedChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UploadedChunks {
      get { return uploadedChunks_; }
      set {
        uploadedChunks_ = value;
      }
    }

    /// <summary>Field number for the "totalChunks" field.</summary>
    public const int TotalChunksFieldNumber = 2;
    private int totalChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalChunks {
      get { return totalChunks_; }
      set {
        totalChunks_ = value;
      }
    }

    /// <summary>Field number for the "uploadedChunksIndexes" field.</summary>
    public const int UploadedChunksIndexesFieldNumber = 3;
    private string uploadedChunksIndexes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadedChunksIndexes {
      get { return uploadedChunksIndexes_; }
      set {
        uploadedChunksIndexes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UploadedChunks != other.UploadedChunks) return false;
      if (TotalChunks != other.TotalChunks) return false;
      if (UploadedChunksIndexes != other.UploadedChunksIndexes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UploadedChunks != 0) hash ^= UploadedChunks.GetHashCode();
      if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
      if (UploadedChunksIndexes.Length != 0) hash ^= UploadedChunksIndexes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UploadedChunks != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UploadedChunks);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalChunks);
      }
      if (UploadedChunksIndexes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UploadedChunksIndexes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UploadedChunks != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UploadedChunks);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalChunks);
      }
      if (UploadedChunksIndexes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UploadedChunksIndexes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UploadedChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UploadedChunks);
      }
      if (TotalChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalChunks);
      }
      if (UploadedChunksIndexes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadedChunksIndexes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Info other) {
      if (other == null) {
        return;
      }
      if (other.UploadedChunks != 0) {
        UploadedChunks = other.UploadedChunks;
      }
      if (other.TotalChunks != 0) {
        TotalChunks = other.TotalChunks;
      }
      if (other.UploadedChunksIndexes.Length != 0) {
        UploadedChunksIndexes = other.UploadedChunksIndexes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UploadedChunks = input.ReadInt32();
            break;
          }
          case 16: {
            TotalChunks = input.ReadInt32();
            break;
          }
          case 26: {
            UploadedChunksIndexes = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UploadedChunks = input.ReadInt32();
            break;
          }
          case 16: {
            TotalChunks = input.ReadInt32();
            break;
          }
          case 26: {
            UploadedChunksIndexes = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FileChunk : pb::IMessage<FileChunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileChunk> _parser = new pb::MessageParser<FileChunk>(() => new FileChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::gRPCFileTransfer.UploadReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk(FileChunk other) : this() {
      fileId_ = other.fileId_;
      fileName_ = other.fileName_;
      chunkIndex_ = other.chunkIndex_;
      totalChunks_ = other.totalChunks_;
      totalFileSize_ = other.totalFileSize_;
      chunk_ = other.chunk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk Clone() {
      return new FileChunk(this);
    }

    /// <summary>Field number for the "fileId" field.</summary>
    public const int FileIdFieldNumber = 1;
    private string fileId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileId {
      get { return fileId_; }
      set {
        fileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chunkIndex" field.</summary>
    public const int ChunkIndexFieldNumber = 3;
    private int chunkIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkIndex {
      get { return chunkIndex_; }
      set {
        chunkIndex_ = value;
      }
    }

    /// <summary>Field number for the "totalChunks" field.</summary>
    public const int TotalChunksFieldNumber = 4;
    private int totalChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalChunks {
      get { return totalChunks_; }
      set {
        totalChunks_ = value;
      }
    }

    /// <summary>Field number for the "totalFileSize" field.</summary>
    public const int TotalFileSizeFieldNumber = 5;
    private long totalFileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFileSize {
      get { return totalFileSize_; }
      set {
        totalFileSize_ = value;
      }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 6;
    private pb::ByteString chunk_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Chunk {
      get { return chunk_; }
      set {
        chunk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileId != other.FileId) return false;
      if (FileName != other.FileName) return false;
      if (ChunkIndex != other.ChunkIndex) return false;
      if (TotalChunks != other.TotalChunks) return false;
      if (TotalFileSize != other.TotalFileSize) return false;
      if (Chunk != other.Chunk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileId.Length != 0) hash ^= FileId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
      if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
      if (TotalFileSize != 0L) hash ^= TotalFileSize.GetHashCode();
      if (Chunk.Length != 0) hash ^= Chunk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FileId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (ChunkIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChunkIndex);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalChunks);
      }
      if (TotalFileSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFileSize);
      }
      if (Chunk.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Chunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FileId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (ChunkIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChunkIndex);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalChunks);
      }
      if (TotalFileSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFileSize);
      }
      if (Chunk.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Chunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (ChunkIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkIndex);
      }
      if (TotalChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalChunks);
      }
      if (TotalFileSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFileSize);
      }
      if (Chunk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Chunk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileChunk other) {
      if (other == null) {
        return;
      }
      if (other.FileId.Length != 0) {
        FileId = other.FileId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.ChunkIndex != 0) {
        ChunkIndex = other.ChunkIndex;
      }
      if (other.TotalChunks != 0) {
        TotalChunks = other.TotalChunks;
      }
      if (other.TotalFileSize != 0L) {
        TotalFileSize = other.TotalFileSize;
      }
      if (other.Chunk.Length != 0) {
        Chunk = other.Chunk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileId = input.ReadString();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 24: {
            ChunkIndex = input.ReadInt32();
            break;
          }
          case 32: {
            TotalChunks = input.ReadInt32();
            break;
          }
          case 40: {
            TotalFileSize = input.ReadInt64();
            break;
          }
          case 50: {
            Chunk = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FileId = input.ReadString();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 24: {
            ChunkIndex = input.ReadInt32();
            break;
          }
          case 32: {
            TotalChunks = input.ReadInt32();
            break;
          }
          case 40: {
            TotalFileSize = input.ReadInt64();
            break;
          }
          case 50: {
            Chunk = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
